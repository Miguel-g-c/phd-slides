---
interface Objectives {
  names: string[];
  units: string[];
  values: number[][];
}

interface DecisionVariables {
  names: string[];
  units: string[];
  values: (string | number)[][];
}

interface Props {
  id: string;
  objectives: Objectives;
  decisionVariables: DecisionVariables;
  x_index?: number;
  y_index?: number;
}

const {
  id,
  objectives,
  decisionVariables,
  x_index = 0,
  y_index = 1,
} = Astro.props;
---

<two-pareto-front
  class="flex flex-col items-center"
  data-objectives={JSON.stringify(objectives)}
  data-decision-variables={JSON.stringify(decisionVariables)}
  data-x-index={x_index}
  data-y-index={y_index}
>
  <div id={id} class="size-fit rounded-xl overflow-hidden"></div>
</two-pareto-front>

<script>
  import Plotly from "plotly.js-dist";
  class TwoParetoFront extends HTMLElement {
    objectives: any;
    decisionVariables: any;
    x_index: number;
    y_index: number;
    graph: Plotly.PlotlyHTMLElement;

    constructor() {
      super();

      this.objectives = JSON.parse(this.dataset.objectives ?? "{}");
      this.decisionVariables = JSON.parse(
        this.dataset.decisionVariables ?? "{}",
      );
      this.x_index = parseInt(this.dataset.xIndex ?? "0");
      this.y_index = parseInt(this.dataset.yIndex ?? "1");
      this.graph = this.querySelector("div")!;
      this.render();
    }

    render() {
      const x_name = this.objectives.names[this.x_index];
      const y_name = this.objectives.names[this.y_index];

      const x_unit = this.objectives.units[this.x_index];
      const y_unit = this.objectives.units[this.y_index];

      const x_values = this.objectives.values.map((row) => row[this.x_index]);
      const y_values = this.objectives.values.map((row) => row[this.y_index]);

      const plotData = [
        {
          x: x_values,
          y: y_values,
          mode: "lines+markers",
          marker: { color: "#addb67", size: 6 },
          line: { color: "#addb67", width: 2, shape: "hv" },
          opacity: 0.9,
          type: "scatter",
        },
      ];

      const layout = {
        margin: { l: 60, r: 20, b: 60, t: 20 },
        paper_bgcolor: "#011627",
        plot_bgcolor: "#011627",
        hoverlabel: {
          bgcolor: "#424a78",
          font: { size: 10, color: "#d6deeb" },
          bordercolor: "#d6deeb",
        },
        xaxis: {
          title: `${x_name} (${x_unit})`,
          titlefont: { color: "#d6deeb", size: 12 },
          tickfont: { color: "#d6deeb", size: 11 },
          zerolinecolor: "#637777",
          spikethickness: 0.5,
          spikecolor: "#80CBC4",
          gridcolor: "#0d2336",
        },
        yaxis: {
          title: `${y_name} (${y_unit})`,
          titlefont: { color: "#d6deeb", size: 12 },
          tickfont: { color: "#d6deeb", size: 11 },
          zerolinecolor: "#637777",
          spikethickness: 0.5,
          gridcolor: "#0d2336",
          spikecolor: "#80CBC4",
        },
      };

      const config = {
        displaylogo: false,
        displayModeBar: false,
        responsive: true,
      };

      Plotly.newPlot(this.graph.id, plotData, layout, config);

      this.graph.on("plotly_hover", (data) => {
        let x = data.points[0].x;
        let pos = x_values.indexOf(x);

        data.points[0].fullData.hovertemplate =
          "<b>Variables de decisi√≥n</b><br>" +
          `${this.renderDecisionVariables(pos)}` +
          "<br><b>Objetivos</b><br>" +
          `${x_name}: %{x:.04f} ${x_unit}<br>` +
          `${y_name}: %{y:.04f} ${y_unit}<br>` +
          "<extra></extra>";
      });
    }

    renderDecisionVariables(pos) {
      let str = "";
      for (let i = 0; i < this.decisionVariables.names.length; i++) {
        var name = this.decisionVariables.names[i];
        var unit = this.decisionVariables.units[i];
        var value = this.decisionVariables.values[pos][i];
        value = isNaN(value) ? value : value.toFixed(4);
        str += `${name}: ${value} ${unit}<br>`;
      }
      return str;
    }
  }

  customElements.define("two-pareto-front", TwoParetoFront);
</script>
