---
interface Objectives {
  names: string[];
  units: string[];
  values: number[][];
}

interface DecisionVariables {
  names: string[];
  units: string[];
  values: (string | number)[][];
}

interface Props {
  id: string;
  objectives: Objectives;
  decisionVariables: DecisionVariables;
  x_index?: number;
  y_index?: number;
}

const {
  id,
  objectives,
  decisionVariables,
  x_index = 0,
  y_index = 1,
} = Astro.props;
---

<div class="flex flex-col items-center">
  <div id={id} class="size-fit rounded-xl overflow-hidden"></div>
</div>

<script
  define:vars={{
    id,
    objectives,
    decisionVariables,
    x_index,
    y_index,
  }}
>
  const x_name = objectives.names[x_index];
  const y_name = objectives.names[y_index];

  const x_unit = objectives.units[x_index];
  const y_unit = objectives.units[y_index];

  const x_values = objectives.values.map((row) => row[x_index]);
  const y_values = objectives.values.map((row) => row[y_index]);

  const plotData = [
    {
      x: x_values,
      y: y_values,
      mode: "lines+markers",
      marker: { color: "#addb67", size: 6 },
      line: { color: "#addb67", width: 2, shape: "hv" },
      opacity: 0.9,
      type: "scatter",
    },
  ];

  const layout = {
    margin: { l: 60, r: 20, b: 60, t: 20 },
    paper_bgcolor: "#011627",
    plot_bgcolor: "#011627",
    hoverlabel: {
      bgcolor: "#424a78",
      font: { size: 10, color: "#d6deeb" },
      bordercolor: "#d6deeb",
    },
    xaxis: {
      title: `${x_name} (${x_unit})`,
      titlefont: { color: "#d6deeb", size: 12 },
      tickfont: { color: "#d6deeb", size: 11 },
      zerolinecolor: "#637777",
      spikethickness: 0.5,
      spikecolor: "#80CBC4",
      gridcolor: "#0d2336",
    },
    yaxis: {
      title: `${y_name} (${y_unit})`,
      titlefont: { color: "#d6deeb", size: 12 },
      tickfont: { color: "#d6deeb", size: 11 },
      zerolinecolor: "#637777",
      spikethickness: 0.5,
      gridcolor: "#0d2336",
      spikecolor: "#80CBC4",
    },
  };

  const config = {
    displaylogo: false,
    displayModeBar: false,
    responsive: true,
  };

  Plotly.newPlot(id, plotData, layout, config);

  graph = document.getElementById(id);

  graph.on("plotly_hover", function (data) {
    let x = data.points[0].x;
    let pos = x_values.indexOf(x);

    data.points[0].fullData.hovertemplate =
      "<b>Decision variables</b><br>" +
      `${renderDecisionVariables(pos)}` +
      "<br><b>Objectives</b><br>" +
      `${x_name}: %{x:.04f} ${x_unit}<br>` +
      `${y_name}: %{y:.04f} ${y_unit}<br>` +
      "<extra></extra>";
  });

  function renderDecisionVariables(pos) {
    let str = "";
    for (let i = 0; i < decisionVariables.names.length; i++) {
      var name = decisionVariables.names[i];
      var unit = decisionVariables.units[i];
      var value = decisionVariables.values[pos][i];
      value = isNaN(value) ? value : value.toFixed(4);
      str += `${name}: ${value} ${unit}<br>`;
    }
    return str;
  }
</script>
